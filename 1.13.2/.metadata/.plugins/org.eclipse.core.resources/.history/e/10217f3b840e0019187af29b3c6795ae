package com.aypi.utils.xml;

import java.io.File;
import java.util.ArrayList;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.bukkit.entity.Player;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import com.aypi.Aypi;
import com.aypi.utils.xml.balises.VariableBalise;
import com.aypi.utils.xml.script.ScriptManager;

public class XMLFile {
	
	private File file;
	private ArrayList<MCBalise> mcBalises;

	private ScriptManager scriptManager;
	
	public XMLFile(File file) {
		this.file = file;
		this.mcBalises = new ArrayList<MCBalise>();
		this.scriptManager = new ScriptManager();
	}
	
	public void load() {

		final DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		
		try {
			final DocumentBuilder builder = factory.newDocumentBuilder();
			final Document document = builder.parse(file);
			
			//Affichage du prologue
		    System.out.println("*************PROLOGUE************");
		    System.out.println("name : "+file.getName());
		    System.out.println("version : " + document.getXmlVersion());
		    System.out.println("encode : " + document.getXmlEncoding());		
	        System.out.println("standalone : " + document.getXmlStandalone());
		    System.out.println("*************ELEMENTS************");
	        
	        final Element racine = document.getDocumentElement();
	        
	        if (racine.getNodeName().equalsIgnoreCase("server")) {
	        	
	        	final NodeList racineNoeuds = racine.getChildNodes();
	        	for (MCBalise m : createBalise(racineNoeuds)) {
		        	this.mcBalises.add(m);
		        	if (m instanceof VariableBalise) {
		        		m.execute(null, this);
		        	}
	        	}
	        	
	        } else {
	        	System.out.println("ERROR: your balise root should be 'server'.");
	        }
			
		} catch(Exception e) {e.printStackTrace();}
		
		printBalise(mcBalises);
		
	}

	public void recursiveSave(ArrayList<MCBalise> mcbs, Document document, Element baseElements) {
		
		for (MCBalise mcBalise : mcBalises) {
			
			Element element = document.createElement(mcBalise.getName());
			element.appendChild(document.createTextNode(mcBalise.getPureContent()));
			baseElements.appendChild(element);
			
			for (int i = 0 ; i < mcBalise.getNamedNodeMap().getLength() ; i++) {
				Node node = mcBalise.getNamedNodeMap().item(i);
				
				Attr attr = document.createAttribute(node.getNodeName());
				attr.setNodeValue(node.getNodeValue());
				element.setAttributeNode(attr);
			}
			
			if (mcBalise.haveChildren()) {
				System.out.println("Need recurs "+mcBalise.getName());
				recursiveSave(mcBalise.getChildrens(), document, element);
			}
			
		}
		
	}
	
	public void saveFile() {
		
		try {
			
			DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
			
			//rooter
			Document doc = docBuilder.newDocument();
			Element rootElement = doc.createElement("server");
			doc.appendChild(rootElement);
			
			recursiveSave(mcBalises, doc, rootElement);
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource source = new DOMSource(doc);
			StreamResult result = new StreamResult(file);
			
			// Output to console for testing
			// StreamResult result = new StreamResult(System.out);

			transformer.transform(source, result);

			System.out.println("File: "+file.getName()+" saved.");
			
		} catch(Exception e) { e.printStackTrace(); }
		
	}
	
	private void printBalise(ArrayList<MCBalise> mcb) {
		for (MCBalise m : mcb) {
			if (m.haveChildren()) {
				System.out.println("\\/"+m.getName());
				printBalise(m.getChildrens());
				System.out.println("/\\"+m.getName());
			} else {
				System.out.println("- "+m.getName()+" -");
			}
			
		}
	}
	
	private ArrayList<MCBalise> createBalise(NodeList node) {
		
		ArrayList<MCBalise> mcBalises = new ArrayList<MCBalise>();
		
		for (int i = 0 ; i < node.getLength() ; i++) {
    		
			if (node.item(i).getNodeType() == Node.ELEMENT_NODE) {
				for (MCBalise mc : Aypi.getXMLFileManager().getMCBalises()) {
					if (node.item(i).getNodeName().equalsIgnoreCase(mc.getName())) {
						MCBalise mb = mc.getInstance();
						mb.setUpAttributes(node.item(i).getAttributes());
						mb.setContent(node.item(i).getTextContent(), this, 0);
						if (node.item(i).hasChildNodes()) {
							for (MCBalise children : createBalise(node.item(i).getChildNodes())) {
								mb.addChildren(children);
							}
						}
						mcBalises.add(mb);
					}
				}
				
				
			}
    		
    	}
		
		return mcBalises;

	}
	
	public void destroy() {
		while (mcBalises.size() != 0) {
			mcBalises.remove(0);
		}
		Aypi.getXMLFileManager().removeXMLFile(this);
	}
	
	public void addMCBalise(MCBalise mcBalise) {
		mcBalises.add(mcBalise);
	}
	
	public ArrayList<MCBalise> getMCBalises() {
		return mcBalises;
	}
	
	public File getFile() {
		return file;
	}
	
	public ScriptManager getScriptManager() {
		return this.scriptManager;
	}

	public void executesAllBalises(String name, Player player) {
		
		for (MCBalise mcb : mcBalises) {
			if (mcb.getName().equalsIgnoreCase(name)) {
				mcb.execute(player, this);
			}
			
		}
		
	}
	
}
